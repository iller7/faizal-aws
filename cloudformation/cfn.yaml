AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates a code-server IDE. Based on the EKS Workshop
  aws cloudformation deploy --output table --region eu-west-1 --profile FaizalAWS --stack-name faizal-infra --tags deployed-by=aws-cli --capabilities CAPABILITY_NAMED_IAM --template-file ~/repos/faizal-aws/cloudformation/cfn.yaml

Globals:
  Tags:
    - Key: "updated-by"
      Value: "Faizal Sahebdin"

Parameters:
  InstanceVolumeSize:
    Type: Number
    Description: The Size in GB of the Cloud9 Instance Volume.
    Default: 30
  RepositoryOwner:
    Type: String
    Description: The owner of the GitHub repository to be used to bootstrap Cloud9
    Default: "Faizal Sahebdin"
  RepositoryName:
    Type: String
    Description: The name of the GitHub repository to be used to bootstrap Cloud9
    Default: "faizal-aws"
  RepositoryRef:
    Type: String
    Description: The Git reference to be used to bootstrap Cloud9
    Default: "main"
  ResourcesPrecreated:
    Type: String
    Description: Whether lab infrastructure has been pre-provisioned
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
  AnalyticsEndpoint:
    Type: String
    Description: Analytics endpoint used for AWS events
    Default: ""
  CodeServerVersion:
    Type: String
    Description: Default code-server version to use
    Default: "4.91.1"
  AmiParameterStoreName:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"
  Environment:
    Type: String
    Description: For testing purposes only
    Default: "dev"
Mappings:
  PrefixListID:
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ca-central-1:
      PrefixList: pl-38a64351
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-north-1:
      PrefixList: pl-fab65393
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for IDE
      SecurityGroupIngress:
        - Description: Allow HTTP from CloudFront
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !FindInMap [PrefixListID, !Ref "AWS::Region", PrefixList]
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
  InfraLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName:
            Fn::Join:
              - ""
              - - InfraLambdaPolicy-
                - Ref: AWS::Region
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                Resource: "*"
  InfraBootstrapInstanceLambda:
    Type: Custom::InfraBootstrapInstanceLambda
    DependsOn:
      - InfraLambdaExecutionRole
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - InfraBootstrapInstanceLambdaFunction
          - Arn
      REGION:
        Ref: AWS::Region
      InstanceId:
        Ref: InfraInstance
      SsmDocument:
        Ref: InfraSSMDocument
  InfraBootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - InfraLambdaExecutionRole
          - Arn
      Runtime: python3.12
      Environment:
        Variables:
          DiskSize:
            Ref: InstanceVolumeSize
      MemorySize: 256
      Timeout: "900"
      Code:
        ZipFile: "from __future__ import print_function\nimport boto3\nimport json\nimport os\nimport time\nimport traceback\nimport cfnresponse\nimport logging\nlogger = logging.getLogger(__name__)\n\ndef lambda_handler(event, context):\n    print(event.values())\n    print('context: {}'.format(context))\n    responseData = {}\n\n    status = cfnresponse.SUCCESS\n    \n    if event['RequestType'] == 'Delete':\n        responseData = {'Success': 'Custom Resource removed'}\n        cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')              \n    else:\n        try:\n            # Open AWS clients\n            #ec2 = boto3.client('ec2')\n            ssm = boto3.client('ssm')\n\n            instance_id = event['ResourceProperties']['InstanceId']\n\n            ssm_document = event['ResourceProperties']['SsmDocument']\n\n            print('Sending SSM command...')\n\n            response = ssm.send_command(\n              InstanceIds=[instance_id],\n              DocumentName=ssm_document)\n\n            command_id = response['Command']['CommandId']\n\n            waiter = ssm.get_waiter('command_executed')\n\n            waiter.wait(\n              CommandId=command_id,\n              InstanceId=instance_id,\n              WaiterConfig={\n                'Delay': 10,\n                'MaxAttempts': 60\n              }\n            )\n\n            responseData = {'Success': 'Started bootstrapping for instance: '+instance_id}\n            cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n            \n        except Exception as e:\n            status = cfnresponse.FAILED\n            print(traceback.format_exc())\n            responseData = {'Error': traceback.format_exc(e)}\n        finally:\n            cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')\n"
  InfraSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Command
      DocumentFormat: YAML
      Content:
        schemaVersion: "2.2"
        description: Bootstrap Cloud9 Instance
        mainSteps:
          - action: aws:runShellScript
            name: Infrabootstrap
            inputs:
              runCommand:
                - !Sub |
                  set -e

                  yum install -y git tar gzip vim nodejs npm make gcc g++ argon2

                  export environment="${Environment}"

                  source <(curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/hack/lib/common-env.sh)

                  dnf copr enable -y @caddy/caddy epel-9-x86_64
                  dnf install -y caddy
                  systemctl enable --now caddy

                  tee /etc/caddy/Caddyfile <<EOF
                  http://${InfraCloudFrontDistribution.DomainName} {
                    reverse_proxy 127.0.0.1:8889
                  }
                  EOF

                  systemctl restart caddy

                  tee /etc/profile.d/custom_prompt.sh <<EOF
                  #!/bin/sh

                  export PROMPT_COMMAND='export PS1="\u:\w:$ "'
                  EOF

                  export AWS_REGION="${AWS::Region}"
                  export REPOSITORY_OWNER="${RepositoryOwner}"
                  export REPOSITORY_NAME="${RepositoryName}"
                  export REPOSITORY_REF="${RepositoryRef}"
                  export RESOURCES_PRECREATED="${ResourcesPrecreated}"
                  export ANALYTICS_ENDPOINT="${AnalyticsEndpoint}"

                  curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/lab/scripts/installer.sh | bash

                  cat <<"EOT" | sudo -E -H -u ec2-user bash
                  set -e

                  mkdir -p ~/environment

                  codeServer=$(dnf list installed code-server | wc -l)
                  if [ "$codeServer" -eq "0" ]; then
                    curl -Ls -o /tmp/coder.rpm https://github.com/coder/code-server/releases/download/v${CodeServerVersion}/code-server-${CodeServerVersion}-amd64.rpm
                    sudo rpm -U "/tmp/coder.rpm"

                    sudo systemctl enable --now code-server@ec2-user
                  fi

                  PASSWORD_SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${InfraPassword.Id}" --query 'SecretString' --output text)
                  IDE_PASSWORD=$(echo "$PASSWORD_SECRET_VALUE" | jq -r '.password')
                  HASHED_PASSWORD=$(echo -n "$IDE_PASSWORD" | argon2 saltItWithSalt -l 32 -e)

                  mkdir -p ~/.config/code-server
                  touch ~/.config/code-server/config.yaml
                  tee ~/.config/code-server/config.yaml <<EOF
                  cert: false
                  auth: password
                  hashed-password: "$HASHED_PASSWORD"
                  bind-addr: 127.0.0.1:8889
                  EOF

                  mkdir -p ~/.local/share/code-server/User
                  touch ~/.local/share/code-server/User/settings.json
                  tee ~/.local/share/code-server/User/settings.json <<EOF
                  {
                    "extensions.autoUpdate": false,
                    "extensions.autoCheckUpdates": false,
                    "security.workspace.trust.enabled": false,
                    "task.allowAutomaticTasks": "on",
                    "telemetry.telemetryLevel": "off",
                    "workbench.startupEditor": "terminal"
                  }
                  EOF

                  mkdir -p ~/environment/.vscode
                  tee ~/environment/.vscode/settings.json <<EOF
                  {
                    "files.exclude": {
                      "**/.*": true
                    }
                  }
                  EOF

                  echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > ~/.local/share/code-server/coder.json

                  curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/lab/scripts/setup.sh | bash

                  curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/lab/scripts/banner.sh | bash

                  code-server --install-extension ms-kubernetes-tools.vscode-kubernetes-tools --force
                  code-server --install-extension redhat.vscode-yaml --force

                  EOT

                  systemctl restart code-server@ec2-user
  InfraRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ide-password
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource:
                  - !Ref InfraPassword
              - Effect: Allow
                Action: secretsmanager:ListSecrets
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Path: "/"
  AccountIamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref InfraRole
      ManagedPolicyName: !Sub ${AWS::StackName}-iam
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iam:CreateRole
              - iam:GetRolePolicy
              - iam:DetachRolePolicy
              - iam:AttachRolePolicy
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:DeleteRole
              - iam:ListInstanceProfilesForRole
              - iam:ListAttachedRolePolicies
              - iam:ListRolePolicies
              - iam:TagRole
              - iam:PassRole
              - sts:AssumeRole
              - iam:DeleteServiceLinkedRole
              - iam:GetServiceLinkedRoleDeletionStatus
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/eks-workshop*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/eksctl-eks-workshop*
              - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/fis*
          - Effect: Allow
            Action:
              - iam:CreatePolicy
              - iam:DeletePolicy
              - iam:GetPolicyVersion
              - iam:DeletePolicyVersion
              - iam:ListPolicyVersions
              - iam:TagPolicy
              - iam:GetPolicy
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:policy/eks-workshop*
              - !Sub arn:aws:iam::${AWS::AccountId}:policy/eksctl-eks-workshop*
          - Effect: Allow
            Action:
              - iam:CreateInstanceProfile
              - iam:DeleteInstanceProfile
              - iam:GetInstanceProfile
              - iam:TagInstanceProfile
              - iam:RemoveRoleFromInstanceProfile
              - iam:AddRoleToInstanceProfile
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/eks-workshop*
              - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/eksctl-eks-workshop*
              - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/eks-*
          - Effect: Allow
            Action:
              - iam:CreateUser
              - iam:DeleteUser
              - iam:TagUser
              - iam:GetUser
              - iam:ListGroupsForUser
              - iam:AttachUserPolicy
              - iam:DetachUserPolicy
              - iam:ListAttachedUserPolicies
              - iam:*SSHPublicKey
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:user/eks-workshop*
          - Effect: Allow
            Action:
              - iam:ListOpenIDConnectProviders
              - iam:CreateOpenIDConnectProvider
              - iam:DeleteOpenIDConnectProvider
              - iam:TagOpenIDConnectProvider
              - iam:GetOpenIDConnectProvider
              - iam:GetRole
              - iam:ListPolicies
              - iam:ListRoles
            Resource: ["*"]
          - Effect: Allow
            Action:
              - iam:CreateServiceLinkedRole
            Resource: ["*"]
            Condition:
              StringEquals:
                iam:AWSServiceName:
                  - eks.amazonaws.com
                  - eks-nodegroup.amazonaws.com
                  - eks-fargate.amazonaws.com
                  - guardduty.amazonaws.com
                  - spot.amazonaws.com
                  - fis.amazonaws.com
                  - transitgateway.amazonaws.com
  AccountBasePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref InfraRole
      ManagedPolicyName: !Sub ${AWS::StackName}-base
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - eks:*
              - ec2:CreateLaunchTemplate
              - ec2:DeleteLaunchTemplate
              - sts:GetCallerIdentity
            Resource: ["*"]
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
            Resource:
              - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/eksctl-eks-workshop*
            Condition:
              "Null":
                cloudformation:RoleARN: "true"
          - Effect: Allow
            Action:
              - cloudformation:DeleteStack
            Resource:
              - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/eksctl-eks-workshop*
            Condition:
              "Null":
                cloudformation:RoleARN: "true"
          - Effect: Allow
            Action:
              - cloudformation:Get*
              - cloudformation:Describe*
              - cloudformation:List*
              - cloudformation:TagResource
            Resource: ["*"]
          - Effect: Allow
            Action:
              - autoscaling:UpdateAutoScalingGroup
            Resource: ["*"]
            Condition:
              StringLike:
                aws:ResourceTag/eks:cluster-name:
                  - eks-workshop
          - Effect: Allow
            Action:
              - autoscaling:Get*
              - autoscaling:Describe*
            Resource: ["*"]
          - Effect: Allow
            Action:
              - ecr-public:GetAuthorizationToken
              - sts:GetServiceBearerToken
            Resource: ["*"]
          - Effect: Allow
            Action:
              - kms:CreateKey
              - kms:TagResource
              - kms:ScheduleKeyDeletion
              - kms:CreateGrant
              - kms:EnableKeyRotation
              - kms:GetKeyPolicy
              - kms:GetKeyRotationStatus
              - kms:ListResourceTags
              - kms:PutKeyPolicy
            Resource: ["*"]
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:EnableKeyRotation
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: ["*"]
            Condition:
              StringLike:
                kms:RequestAlias: ["alias/eks-workshop*", "alias/eks/eks-workshop*"]
          - Effect: Allow
            Action:
              - kms:CreateAlias
              - kms:DeleteAlias
            Resource:
              - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/eks-workshop*
              - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/eks/eks-workshop*
              - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
          - Effect: Allow
            Action:
              - kms:List*
              - kms:Get*
              - kms:Describe*
            Resource: ["*"]
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource: !Sub arn:aws:ssm:${AWS::Region}::parameter/aws/service/*
  AccountEc2Policy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref InfraRole
      ManagedPolicyName: !Sub ${AWS::StackName}-ec2
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ec2:Get*
              - ec2:Describe*
              - ec2:List*
              - ec2:RunInstances
              - ec2:ImportKeyPair
              - ec2:DeleteKeyPair
            Resource: ["*"]
          - Effect: Allow
            Action:
              - ec2:StopInstances
              - ec2:TerminateInstances
              - ec2:ModifyInstanceAttribute
            Resource: ["*"]
            Condition:
              StringLike:
                aws:ResourceTag/env:
                  - eks-workshop*
          - Effect: Deny
            Action: ec2:RunInstances
            Resource:
              - !Sub arn:aws:ec2:*:*:instance/*
            Condition:
              ForAnyValue:StringNotLike:
                ec2:InstanceType:
                  - m5.large
                  - t4g.medium
                  - c*.large
          - Effect: Allow
            Action:
              - ec2:CreateVpc
              - ec2:CreateSubnet
              - ec2:CreateRouteTable
              - ec2:CreateRoute
              - ec2:CreateInternetGateway
              - ec2:AttachInternetGateway
              - ec2:AssociateRouteTable
              - ec2:ModifyVpcAttribute
              - ec2:CreateSecurityGroup
              - ec2:AllocateAddress
              - ec2:ReleaseAddress
              - ec2:DisassociateAddress
              - ec2:CreateNetworkAclEntry
              - ec2:DeleteNetworkAclEntry
              - ec2:CreateNatGateway
              - ec2:DeleteNatGateway
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateTransitGateway
              - ec2:DeleteTransitGateway
              - ec2:CreateTransitGatewayVpcAttachment
              - ec2:DeleteTransitGatewayVpcAttachment
              - ec2:CreateTransitGatewayRoute
              - ec2:SearchTransitGatewayRoutes
              - ec2:DeleteTransitGatewayRoute
              - ec2:ModifyNetworkInterfaceAttribute
              - ec2:CreateNetworkInterfacePermission
              - ec2:AssignIpv6Addresses
              - ec2:UnAssignIpv6Addresses
              - ec2:ImportKeyPair
              - ec2:CreateKeyPair
              - ec2:DeleteKeyPair
            Resource: ["*"]
          - Effect: Allow
            Action:
              - ec2:DeleteVpc
              - ec2:DeleteSubnet
              - ec2:DeleteRouteTable
              - ec2:DeleteRoute
              - ec2:DeleteInternetGateway
              - ec2:DetachInternetGateway
              - ec2:DisassociateRouteTable
              - ec2:ModifyVpcAttribute
              - ec2:ModifySubnetAttribute
              - ec2:AuthorizeSecurityGroup*
              - ec2:UpdateSecurityGroupRuleDescriptionsEgress
              - ec2:RevokeSecurityGroup*
              - ec2:DeleteSecurityGroup
              - ec2:ModifySecurityGroupRules
              - ec2:UpdateSecurityGroupRuleDescriptionsIngress
            Resource: ["*"]
            Condition:
              StringLike:
                aws:ResourceTag/env:
                  - eks-workshop*
          - Effect: Allow
            Action:
              - ec2:AuthorizeSecurityGroup*
              - ec2:RevokeSecurityGroup*
            Resource: ["*"]
          - Effect: Allow
            Action:
              - ec2:CreateTags
              - ec2:DeleteTags
            Resource: ["*"]
          - Effect: Allow
            Action:
              - ec2:AssociateVpcCidrBlock
              - ec2:DisassociateVpcCidrBlock
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/*
            Condition:
              StringLike:
                aws:ResourceTag/env:
                  - eks-workshop*
  AccountSetupPolicy1:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - InfraRole
    Properties:
      Roles:
        - !Ref InfraRole
      ManagedPolicyName: !Sub ${AWS::StackName}-setup1
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - aps:CreateWorkspace
              - aps:TagResource
            Resource: ["*"]
            Condition:
              StringLike:
                aws:RequestTag/env:
                  - eks-workshop*
          - Effect: Allow
            Action:
              - aps:DeleteWorkspace
              - aps:Describe*
              - aps:List*
              - aps:QueryMetrics
            Resource: ["*"]
            Condition:
              StringLike:
                aws:ResourceTag/env:
                  - eks-workshop*
          - Effect: Allow
            Action:
              - dynamodb:ListTables
            Resource: ["*"]
          - Effect: Allow
            Action:
              - dynamodb:CreateTable
              - dynamodb:DeleteTable
              - dynamodb:DescribeTable
              - dynamodb:DescribeContinuousBackups
              - dynamodb:ListTagsOfResource
              - dynamodb:DescribeTimeToLive
              - dynamodb:Scan
              - dynamodb:TagResource
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/eks-workshop*
          - Effect: Allow
            Action:
              - secretsmanager:ListSecrets
            Resource: ["*"]
          - Effect: Allow
            Action:
              - secretsmanager:CreateSecret
              - secretsmanager:DeleteSecret
              - secretsmanager:DescribeSecret
            Resource:
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:eks-workshop*
          - Effect: Allow
            Action:
              - secretsmanager:ListSecrets
            Resource: ["*"]
          - Effect: Allow
            Action:
              - sqs:CreateQueue
              - sqs:DeleteQueue
              - sqs:GetQueueAttributes
              - sqs:SetQueueAttributes
              - sqs:TagQueue
              - sqs:ListQueueTags
            Resource:
              - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:eks-workshop*
          - Effect: Allow
            Action:
              - rds:DescribeDBInstances
            Resource: ["*"]
          - Effect: Allow
            Action:
              - rds:CreateDBInstance
              - rds:CreateTenantDatabase
              - rds:DeleteDBInstance
              - rds:DeleteTenantDatabase
              - rds:DescribeDBInstances
              - rds:AddTagsToResource
              - rds:ListTagsForResource
            Resource:
              - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:eks-workshop*
          - Effect: Allow
            Action:
              - rds:CreateDBInstance
              - rds:CreateDBSubnetGroup
              - rds:DeleteDBSubnetGroup
              - rds:DescribeDBSubnetGroups
              - rds:AddTagsToResource
              - rds:ListTagsForResource
            Resource:
              - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:subgrp:eks-workshop*
          - Effect: Allow
            Action:
              - lambda:AddPermission
              - lambda:CreateFunction
              - lambda:DeleteFunction
              - lambda:GetFunction
              - lambda:GetFunctionCodeSigningConfig
              - lambda:GetPolicy
              - lambda:GetRuntimeManagementConfig
              - lambda:ListVersionsByFunction
              - lambda:RemovePermission
              - lambda:TagResource
            Resource:
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:eks-workshop*
          - Effect: Allow
            Action:
              - lambda:GetLayerVersion
            Resource: ["*"]
          - Effect: Allow
            Action:
              - es:CreateDomain
              - es:DeleteDomain
              - es:DescribeDomain
              - es:DescribeDomainConfig
              - es:GetCompatibleVersions
              - es:ListTags
              - es:AddTags
            Resource:
              - !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/eks-workshop*
          - Effect: Allow
            Action:
              - elasticloadbalancing:Describe*
              - elasticloadbalancing:Get*
            Resource: ["*"]
          - Effect: Allow
            Action:
              - cloudwatch:DeleteDashboards
              - cloudwatch:GetDashboard
              - cloudwatch:PutDashboard
            Resource:
              - !Sub arn:aws:cloudwatch::${AWS::AccountId}:dashboard/*
          - Effect: Allow
            Action:
              - cloudwatch:GetMetricData
            Resource: ["*"]
          - Effect: Allow
            Action:
              - ecr:CreateRepository
              - ecr:DeleteRepository
              - ecr:DescribeRepositories
              - ecr:ListTagsForResource
              - ecr:TagResource
            Resource:
              - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/retail-store-sample*
              - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/eks-workshop*
          - Effect: Allow
            Action:
              - guardduty:CreateDetector
              - guardduty:DeleteDetector
              - guardduty:ListDetectors
            Resource: ["*"]
  AccountSetupPolicy2:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - InfraRole
    Properties:
      Roles:
        - !Ref InfraRole
      ManagedPolicyName: !Sub ${AWS::StackName}-setup2
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - logs:DescribeLogGroups
              - logs:ListTagsForResource
            Resource: ["*"]
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:DeleteLogGroup
              - logs:DeleteSubscriptionFilter
              - logs:PutRetentionPolicy
              - logs:PutSubscriptionFilter
              - logs:TagResource
              - logs:TagLogGroup
              - logs:Get*
              - logs:Describe*
              - logs:List*
            Resource:
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:eks-workshop*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/eks-workshop*
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/eks/eks-workshop*
          - Effect: Allow
            Action:
              - events:DeleteRule
              - events:DescribeRule
              - events:ListTagsForResource
              - events:ListTargetsByRule
              - events:PutRule
              - events:PutTargets
              - events:RemoveTargets
              - events:TagResource
            Resource:
              - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/eks-workshop*
              - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/eks-workshop*
              - !Sub arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/Karpenter*
          - Effect: Allow
            Action:
              - vpc-lattice:List*
              - vpc-lattice:Get*
              - vpc-lattice:DeleteServiceNetwork
              - vpc-lattice:DeleteServiceNetworkVpcAssociation
            Resource: ["*"]
          - Effect: Allow
            Action:
              - elasticfilesystem:CreateFileSystem
              - elasticfilesystem:CreateMountTarget
              - elasticfilesystem:DeleteFileSystem
              - elasticfilesystem:DeleteMountTarget
              - elasticfilesystem:DescribeLifecycleConfiguration
              - elasticfilesystem:DescribeMountTargetSecurityGroups
              - elasticfilesystem:DescribeMountTargets
              - elasticfilesystem:CreateTags
              - elasticfilesystem:TagResource
              - elasticfilesystem:DescribeFileSystems
            Resource:
              - !Sub arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/*
          - Effect: Allow
            Action:
              - fsx:Describe*
              - fsx:ListTagsForResource
            Resource:
              - !Sub arn:aws:fsx:${AWS::Region}:${AWS::AccountId}:file-system/*
          - Effect: Allow
            Action:
              - ssm:DescribeParameters
              - ssm:ListTagsForResource
            Resource: ["*"]
          - Effect: Allow
            Action:
              - ssm:PutParameter
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:DeleteParameter
              - ssm:AddTagsToResource
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/eks-workshop*
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/eksworkshop/eks-workshop*
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}::parameter/aws/service/eks/optimized-ami/*
          - Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:List*
              - s3:Get*
              - s3:PutBucketPublicAccessBlock
              - s3:PutBucketTagging
              - s3:DeleteObject
              - s3:DeleteObjectVersion
            Resource:
              - arn:aws:s3:::eks-workshop*
              - arn:aws:s3:::eks-workshop*/*
          - Effect: Allow
            Action:
              - s3:ListAllMyBuckets
            Resource: ["*"]
          - Effect: Allow
            Action:
              - codecommit:CreateRepository
              - codecommit:GetRepository
              - codecommit:DeleteRepository
              - codecommit:TagResource
              - codecommit:ListTagsForResource
            Resource:
              - !Sub arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:eks-workshop*
          - Effect: Allow
            Action:
              - codebuild:CreateProject
              - codebuild:DeleteProject
              - codebuild:BatchGetProjects
            Resource:
              - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:project/eks-workshop*
          - Effect: Allow
            Action:
              - codepipeline:CreatePipeline
              - codepipeline:DeletePipeline
              - codepipeline:GetPipeline
              - codepipeline:GetPipelineState
              - codepipeline:ListTagsForResource
              - codepipeline:TagResource
            Resource:
              - !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:eks-workshop*
  AccountSetupPolicy3:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - InfraRole
    Properties:
      Roles:
        - !Ref InfraRole
      ManagedPolicyName: !Sub ${AWS::StackName}-setup3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:PutObject
              - s3:List*
              - s3:Get*
              - s3:GetObjectVersion
              - s3:PutBucketPublicAccessBlock
              - s3:PutBucketTagging
              - s3:DeleteObject
              - s3:DeleteObjectVersion
            Resource:
              - arn:aws:s3:::eks-workshop-*
              - arn:aws:s3:::aws-synthetics-library*
          - Effect: Allow
            Action:
              - fis:CreateExperimentTemplate
              - fis:CreateExperimentTemplate
              - fis:GetExperimentTemplate
              - fis:ListExperimentTemplates
              - fis:DeleteExperimentTemplate
              - fis:UpdateExperimentTemplate
              - fis:TagResource
              - fis:UntagResource
              - fis:StartExperiment
              - fis:GetExperiment
              - fis:ListExperiments
            Resource:
              - !Sub arn:aws:fis:${AWS::Region}:${AWS::AccountId}:action/aws:eks:*
              - !Sub arn:aws:fis:${AWS::Region}:${AWS::AccountId}:action/aws:ssm:*
              - !Sub arn:aws:fis:${AWS::Region}:${AWS::AccountId}:experiment-template/*
              - !Sub arn:aws:fis:${AWS::Region}:${AWS::AccountId}:experiment/*
          - Effect: Allow
            Action:
              - synthetics:CreateCanary
              - synthetics:DeleteCanary
              - synthetics:DescribeCanaries
              - synthetics:StartCanary
              - synthetics:StopCanary
              - synthetics:UpdateCanary
            Resource:
              - !Sub arn:aws:synthetics:${AWS::Region}:${AWS::AccountId}:canary:eks-workshop*
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricAlarm
              - cloudwatch:PutMetricData
              - cloudwatch:GetMetricStatistics
              - cloudwatch:ListMetrics
            Resource:
              - !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:eks-workshop*
          - Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:UpdateFunctionCode
              - lambda:GetFunctionConfiguration
              - lambda:UpdateFunctionConfiguration
              - lambda:GetFunction
              - lambda:DeleteFunction
              - lambda:InvokeFunction
              - lambda:AddPermission
              - lambda:RemovePermission
              - lambda:PublishLayerVersion
              - lambda:PublishVersion
            Resource:
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*eks-workshop*
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:*eks-workshop*
  AccountSsmPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref InfraRole
      ManagedPolicyName: !Sub ${AWS::StackName}-ssm
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: ssm:CreateActivation
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/eks-workshop-hybrid-node-role-*
  InfraInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: InfraRole
  InfraInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiParameterStoreName
      InstanceType: t3.medium
      BlockDeviceMappings:
        - Ebs:
            VolumeSize: !Ref InstanceVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
          DeviceName: /dev/xvda
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref InfraInstanceProfile
      Tags:
        - Key: type
          Value: eksworkshop-ide
  InfraPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-password
      GenerateSecretString:
        ExcludeCharacters: "\"@/\\"
        ExcludePunctuation: true
        GenerateStringKey: password
        IncludeSpace: false
        PasswordLength: 32
        SecretStringTemplate: '{"password":""}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  InfraCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Ref AWS::StackName
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: False
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all
  InfraCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: True
        HttpVersion: http2
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
            TargetOriginId: !Sub CloudFront-${AWS::StackName}
            ViewerProtocolPolicy: allow-all
            PathPattern: "/proxy/*"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: !Ref InfraCachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          TargetOriginId: !Sub CloudFront-${AWS::StackName}
          ViewerProtocolPolicy: allow-all
        Origins:
          - DomainName: !GetAtt InfraInstance.PublicDnsName
            Id: !Sub CloudFront-${AWS::StackName}
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
Outputs:
  IdeUrl:
    Value: !Sub https://${InfraCloudFrontDistribution.DomainName}
  IdePasswordSecret:
    Value: !Sub
      - https://console.aws.amazon.com/secretsmanager/secret?name=${SecretName}
      - SecretName: !Sub ${AWS::StackName}-password
  IdePasswordSecretName:
    Value: !Sub ${AWS::StackName}-password
  IdeRole:
    Value: !Sub ${InfraRole.Arn}
